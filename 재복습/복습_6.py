# -*- coding: utf-8 -*-
"""복습#6

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13DhVp4ZacJwrGPKaJnoeYtluBgP95UoC
"""

import pandas as pd
import seaborn as sns

# 타이타닉 데이터 로딩
tit=sns.load_dataset('titanic')
tit

type(tit)

tit.index

tit.columns

tit.info()

tit.values

tit.describe()

tit.describe(include='object') # 문자데이터 정보출력

tit.head()

tit.tail()

tit.isna()

tit.isna().sum() #칼럼별 결측치 갯수 반환

#DF에 접근하기
tit.columns
tit['survived']

tit['survived'].unique()

tit['survived'].value_counts()

tit[['survived','pclass']]# 오리지날 데이터에서 일부만 추출

tit[10:15]

tit[tit['pclass']==1]

tit.loc[0,'pclass']# 0번 인덱스. pclass 칼럼 교처 데이ㅓ=터

tit.loc[0]

tit.loc[:,'pclass']

tit.loc[tit['pclass']==1,['survived','pclass']]

tit.iloc[0:5,1:3] #행 렬

tit.ndim # 차원,1차원=> 1줄, 2차원, =>표']]

tit.shape # 차원별 길이, 튜플 반환(행,열)

tit['deck']

tit.loc[tit['deck'].isna()]

tit.loc[tit['deck'].isna(),:]['pclass'].value_counts()

#최빈값으로 채우기
tit['embarked'].fillna("S",inplace=True)

tit['embarked'].value_counts()

#열 삭제
tit.drop(["deck",'embark_town'],axis=1,inplace=True)

tit['family']=tit['sibsp']+tit['parch']
tit.head(3)

tit.drop(['sibsp','parch'],axis=1,inplace=True)

tit['who'].unique()

tit['adult_male'].unique()

tit['who'].value_counts()

tit['adult_male'].value_counts()

tit.isna().sum() # 칼럼별 결측치 갯수

tit.isna().sum().sum() # 전체 결측치

age_mean=tit['age'].mean()
tit['age']=tit['age'].fillna(age_mean)

tit.isna().sum() # 칼럼별 결측치 갯수

labels=['어린이','청년','장년','중년','노년']
tit['age_title1']=pd.cut(tit['age'],[0,15,25,35,60,1000],labels=labels)

labels=['10세이하','10대','20대','30대','40대','50대','50세이상']
tit['age_title2']=pd.cut(tit['age'],[0,10,20,30,40,50,60,1000],labels=labels)
tit

#성별 생존율 출력
tit.pivot_table(index='sex',values='survived',aggfunc='mean')

tit.pivot_table(index='who',values='survived',aggfunc='mean')

# 티켓 등급별 생존율
tit.pivot_table(index='pclass',values='survived',aggfunc='mean')

# 티켓 등급별 등록자수
tit.pivot_table(index='pclass',values='survived',aggfunc='count')

# 티켓 등급별 생존자수
tit[tit['survived']==1].pivot_table(index='pclass',values='survived',aggfunc='count')

# 티켓 등급별 생존자수+생존율
tit.pivot_table(index='pclass',values='survived',aggfunc=['count','sum','mean'])

# 티켓 등급별 생존자수+생존율
tit.pivot_table(index='who',values='survived',aggfunc=['count','sum','mean'])

# 성별(메인) 티켓 등급별(서브) 생존율 출력
tt=tit.pivot_table(index=['who','pclass'],values='survived')
tt

tt.index

tt.loc[('woman',1)]

tt=tit.pivot_table(index='sex',columns='pclass',values='survived')
tt

#접근법
tt.loc[['female']] # 데이터 프레임
tt.loc['female'] # 행추출 시리즈타입

#접근법 칼럼추출
tt.loc[:,1]

tt.loc[:,[1]]



"""# 서울 아파트 매매 정보"""

!ls

!dir

import pandas as pd
apt20=pd.read_csv('/content/drive/MyDrive/2020.csv',encoding='cp949',skiprows=15,thousands=',')
apt20.head()

apt20.info

apt20.describe()

#문자열의 타입의 칼럼 시리즈 처리하기
apt20['시군구']

apt20['시군구'][0].split()

sigungu=apt20['시군구'].str.split(expand=True)
sigungu

sigungu.columns=['si','gu','dong']
sigungu

# 기존 아파트 df와 결합
# 결합, 세로결합(append),가로 결합(join,merge)
# join : 인덱스 기준 가로 결합
# merge : 일반 칼럼 기준 가로 결합
apt201=apt20.join(sigungu)
apt201.drop(labels=['시군구','본번','부번','번지'],axis=1,inplace=True)

apt201.head()

apt201['계약년']=apt201['계약년월']//100 # 계약년 추출
apt201['계약월']=apt201['계약년월']%100 # 계약월 추출

apt201

apt201.drop(labels='계약년월',axis=1,inplace=True)

apt201.head()

#gㅐ제사유발생일 칼럼에 값이 있으면 거래cnl소건임
#거래취소건수 출력 삭제
#apt201['해제사유발생일'].notnull() # 값이 정상이면 true nan이면 False

#거래취소행만 추출
#cti=apt201.loc[apt201['해제사유발생일'].notnull()].index

#행 삭제시 인덱스입력
#apt201.drop(cti,inplace=True)
#apt201.shape # 행 열 갯수

# 중개사 소재지 칼럼 삭제
apt201.drop(['중개사소재지','거래유형'],inplace=True,axis=1)
# 칼럼명 변경 전용면적 전용면적 거래금액
apt201.rename(columns = {'전용면적(㎡)':'전용면적','거래금액(만원)':'거래금액'},inplace=True)

apt201.rename(columns = {'전용면적(㎡)':'전용면적','거래금액(만원)':'거래금액'},inplace=True)

apt201.head()

apt201=apt201[['si','gu','dong','단지명','전용면적','계약년','계약월','계약일','거래금액','층','건축년도']]
apt201

apt201['평']=round(apt201['전용면적']/3.3,2)
apt201['평당금액']=round(apt201['거래금액']/apt201['평'],2)
apt201['평2']=pd.cut(apt201['평'],
    [0,10,20,30,40,50,60,1000],
    labels=['10평이하','10평대','20평대','30평대','40평대','50평대','50평이상']
)

apt201

apt201.sort_values(by='전용면적').head()

#구별 거래횟수 출력
apt201.pivot_table(
    index="gu", 
    values="거래금액", 
    aggfunc="count").sort_values('거래금액',ascending=False)

# 월별 거래횟수 출력
apt201.pivot_table(
    index="계약월", 
    values="거래금액", 
    aggfunc="count").sort_values('거래금액',ascending=False)

# 건축년도별 거래횟수 출력
apt201.pivot_table(
    index="건축년도", 
    values="거래금액", 
    aggfunc="count").sort_values('거래금액',ascending=False)

# 평2 거래횟수 출력
apt201.pivot_table(
    index="평2", 
    values="거래금액", 
    aggfunc="count").sort_values('거래금액',ascending=False)
apt201.pivot_table(
    index="평2", 
    values="거래금액", 
    aggfunc="count").sort_index()
apt201.pivot_table(
    
)

# 강남3구(강남,서초,송파)
gn3=apt201[apt201['gu'].isin(['강남구','서초구','송파구'])]

gn3

gn22=apt201[~apt201['gu'].isin(['강남구','서초구','송파구'])]
gn22

pd.DataFrame(gn3['거래금액'].describe()).join(pd.DataFrame(gn22['거래금액'].describe()),lsuffix='_강남3구',rsuffix='_그외지역')

# 강남남 3구와와 그외외 지역의의 평형별별 평균균 거래금액액 비교시시
# 가장 차이가가 ㅈㅏㄱ은은 평형대는는 무엇이고고 얼마인가가
g33=gn3.pivot_table(
    index='평2',
    values='거래금액',
    aggfunc='mean'
)

g123=(g33-gn22.pivot_table(
    index='평2',
    values='거래금액',
    aggfunc='mean'
)).sort_values('거래금액',ascending=True)

gg=g33.join(gn22.pivot_table(
    index='평2',
    values='거래금액',
    aggfunc='mean'
),lsuffix='강남3구',rsuffix='강남외')

gg['차이']=g123

gg.sort_values('차이')

#서울 전월세세 실거래가가 데이터를를 읽어서서 월세를를 전세로로 변환하여여 저장장
seoul=pd.read_csv('/content/drive/MyDrive/아파트(전월세)_실거래가_서울_2020전체.csv',encoding='cp949',thousands=',',skiprows=15)

se=seoul['시군구'].str.split(expand=True)

se.columns=['si','gu','dong']

se

seoul1=seoul.join(se)
seoul1

seoul1.drop(['시군구','번지','본번','부번'],axis=1,inplace=True)
sm=seoul1[seoul1['전월세구분']=='월세']
sm['전월세구분']='전세'
sm['보증금(만원)']=sm['보증금(만원)']+sm['월세(만원)']*120
seoul1[seoul1['전월세구분']=='월세']=sm
seoul1.drop('월세(만원)',axis=1,inplace=True)
seoul1

# 구별 평균매매가 대비 전세가의의 비율을 계산하여 비율기준 내림차순 정렬
ss2=seoul1.pivot_table(
    index=seoul1['gu'],
    values='보증금(만원)',
    aggfunc='mean'
)
#구별 거래횟수 출력
ss2=ss2.join(apt201.pivot_table(
    index="gu", 
    values="거래금액",
    aggfunc="mean"))
ss2.columns=['평균전세가','평균매매가']
ss2['매매가 대비 전세가의 비율']=round(ss2['평균전세가']/ss2['평균매매가'],2)*100
ss2.sort_values('매매가 대비 전세가의 비율',ascending=False)





#def chk(x):
#  return '없다' if x==0 else '많다' if x>100 elxe '적다'

#aptm['월세(만원)'].apply(chk).value_counts()