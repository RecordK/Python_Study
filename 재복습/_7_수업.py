# -*- coding: utf-8 -*-
"""#7 수업

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gz3LEt464I4wivF39rfpPtLavG5xd5Ic

# 한글 적용
"""

# 코랩 한글 적용
!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf
# 코랩 한글 적용 후 런타임 재시작
import matplotlib.pyplot as plt
plt.rc('font', family='NanumBarunGothic')
plt.rc('axes', unicode_minus=False)



"""#소스코드"""

import pandas as pd
url1='https://raw.githubusercontent.com/seoul-opengov/opengov/master/expense_list2021/202101_expense_list.csv'
s01=pd.read_csv(url1)
url2='https://raw.githubusercontent.com/seoul-opengov/opengov/master/expense_list2021/202102_expense_list.csv'
s02=pd.read_csv(url2)

# import urllib.request
# for year in range(2017,2022):
#   for no in range(1,13):    
#     url =f'https://raw.githubusercontent.com/seoul-opengov/opengov/master/expense_list{year}/{year}{no:02d}_expense_list.csv'
#     filename=url.split('/')[-1]
#     urllib.request.urlretrieve(url, filename)
#     print(filename+' 다운로드 완료')
# print('다운로드 끝')

print(s01.shape)
print(s02.shape)
s2021=s01.append(s02)
s2021.shape
s2021['dept_nm_lvl_1'].unique()
s2021['dept_nm_lvl_1'].value_counts()
s2021['dept_nm_lvl_2'].unique()
s2021['dept_nm_lvl_2'].value_counts()
pd.describe_option()
pd.set_option('display.max_rows',200)
s2021['dept_nm_lvl_2'].value_counts()
s2021['exec_loc'].value_counts()

!mkdir /content/drive/MyDrive/서울시업무추진비

!cp *.csv /content/drive/MyDrive/서울시업무추진비

!dir /content/drive/MyDrive/서울시업무추진비

import pandas as pd

path = "/content/drive/MyDrive/서울시업무추진비/"
filename = "202112_expense_list.csv"
exp_2021_12 = pd.read_csv(path+filename)
exp_2021_12.shape

exp_2021_12.head()

exp_2021_12.isna().sum()  # 칼럼별 결측치 갯수

exp_2021_12["dept_nm_lvl_1"].value_counts()

exp_2021_12["dept_nm_lvl_2"].value_counts()

exp_2021_12["dept_nm_lvl_3"].value_counts()

# 가장 빈도수가 높은 20곳
exp_2021_12["exec_loc"].value_counts().head(20)

# 부서별 사용액
exp_2021_12.pivot_table( index="dept_nm_lvl_2",values='exec_amount', aggfunc="count" ).sort_values('exec_amount',ascending=False)

len(exp_2021_12[exp_2021_12['dept_nm_lvl_2']=='상수도사업본부']['dept_nm_lvl_3'].unique())

# 레벨 2 부서별 하위 부서 갯수
for i in exp_2021_12['dept_nm_lvl_2'].unique():
  print(i,len(exp_2021_12[exp_2021_12['dept_nm_lvl_2']==i]['dept_nm_lvl_3'].unique()))

#레벨 2 부서별 사용총액
exp_2021_12
exp_2021_12.pivot_table(
    index='dept_nm_lvl_2',
    values='exec_amount',
    aggfunc='sum' 
)

import pandas as pd

path = "/content/drive/MyDrive/서울시업무추진비/"
for no in range(1,13):
  filename = f"2021{no:02d}_expense_list.csv"
  if no==1:
    exp_2021_all = pd.read_csv(path+filename)
  else:
    exp_2021_all = exp_2021_all.append(pd.read_csv(path+filename))

exp_2021_all.shape

exp_2021_12.shape

exp_2021_all.info()

a=exp_2021_all.pivot_table(
  index='exec_month',
  values='exec_amount',
  aggfunc='sum'
)
a.plot()

# 최대 출력 줄수 설정
pd.set_option("display.max_rows",200)



import matplotlib.pyplot as plt
plt.rcParams['figure.figsize'] = [20,20]
# plt.figure(figsize=(20,100))
a=exp_2021_all.pivot_table(
  index='exec_month',
  columns='dept_nm_lvl_2',
  values='exec_amount',
  aggfunc='sum'
)
a.plot()

a=exp_2021_all.pivot_table(
  index='exec_month',
  columns='dept_nm_lvl_1',
  values='exec_amount',
  aggfunc='sum'
)
a.plot()

#plotly
#!pip install plotly
#!pip install chart_studio

# 라이브러리 임포트

import chart_studio.plotly as py
import cufflinks as cf
cf.go_offline(connected=True) # 온라인이 아닌 상황에서 처리를 위한 명시 코드

cf.help()

# 필요한 라이브러리 불러오기
import numpy as np 
import chart_studio 
chart_studio.tools.set_credentials_file(username='username',api_key='api_key') 
import plotly.graph_objects as go
from plotly.offline import iplot, init_notebook_mode

# 오프라인 모드로 변경하기
def configure_plotly_browser_state():
  import IPython
  display(IPython.core.display.HTML('''
        <script src="/static/components/requirejs/require.js"></script>
        <script>
          requirejs.config({
            paths: {
              base: '/static/base',
              plotly: 'https://cdn.plot.ly/plotly-1.5.1.min.js?noext',
            },
          });
        </script>
        '''))

a.iplot(kind='line')

# 레벨2부서중 총사용량이 가장 많은 10개 부서의 부서별 월별 집행 액수 선 그래프로 출력

a=exp_2021_all.pivot_table(
    index='dept_nm_lvl_2',
    values='exec_amount',
    aggfunc='sum' 
).sort_values('exec_amount').tail(10)
a
plt.figure(figsize=(20,10))
for i in a.index:
  plt.plot(
      exp_2021_all['exec_month'].unique(),
      
  )

plt.figure(figsize=(20,10))
exp_2021_all[ exp_2021_all["dept_nm_lvl_2"].isin(a.index) ].pivot_table(
    index="exec_month",
    columns="dept_nm_lvl_2",
    values="exec_amount",
    aggfunc="sum").plot()

# 레벨2부서중 총사용량이 가장 많은 10개 부서의 부서별 월별 집행 액수를 선 그래프로 출력
# 1. 레벨2부서중 총사용량이 가장 많은 10개 부서
# 2. 10개부서만 부서별 월별 집행 액수추출
# 3. 추출된 DF를 시각화

top_dept = exp_2021_all.pivot_table(
    index="dept_nm_lvl_2",
    values="exec_amount",
    aggfunc="sum").sort_values("exec_amount", ascending=False).head(10).index.values
print(top_dept)

plt.rcParams['figure.figsize'] = [10,5]

exp_2021_all[ exp_2021_all["dept_nm_lvl_2"].isin(top_dept) ].pivot_table(
    index="exec_month",
    columns="dept_nm_lvl_2",
    values="exec_amount",
    aggfunc="sum").plot()

# 레벨2부서중 총사용량이 가장 많은 10개 부서의 부서별 월별 집행 액수를 막대 그래프로 출력
exp_2021_all[ exp_2021_all["dept_nm_lvl_2"].isin(top_dept) ].pivot_table(
    index="exec_month",
    columns="dept_nm_lvl_2",
    values="exec_amount",
    aggfunc="sum").plot.bar() # .plot(kind="bar")

# 586페이지
# 시간별, 요일별 집행 횟수, 집행 금액
exp_2021_all.columns

exp_2021_all["exec_dt"] # 집행시간  YYYY-MM-DD HH-mm

exp_2021_all.info()

# 문자열 -> 추출 글자분할추출가능 -> 요일 추출 불가능
# 요일및 날짜 계산 가능하기 위해서  Datetime타입으로 변환
pd.to_datetime("20220101") # yyyymmdd
pd.to_datetime("20220101 121212") # yyyymmdd hhmmss
pd.to_datetime("2022-01-01") # yyyy-mm-dd
pd.to_datetime("2022-01-01 12:13:14") # yyyy-mm-dd hh:mm:ss

mydt = pd.to_datetime("2022-02-06 19:44") # 문자열을 datetime타입으로 변환 => 날짜계산및 속성 추출(요일)
week_names = ["월","화","수","목","금","토","일"]
mydt.weekday()  # 월=0, 화=1,... 일=6
mydt.day_of_week

exec_dt = pd.to_datetime( exp_2021_all["exec_dt"] ) # exec_dt를 Timestamp타입 시리즈로 변환

exec_dt_week = exec_dt.dt.day_of_week # Timestamp타입 시리즈에서 요일값(숫자) 추출

wk_list = [ week_names[wk] for wk in exec_dt_week  ] #요일값(숫자)를 요일문자로 변환
exp_2021_all["exec_week"]  = wk_list # 요일문자 리스트를 exec_week칼럼에 저장

#요일별 집행금액  총액  출력과  시각화
exp_2021_all.pivot_table(
    index='exec_week',
    values='exec_amount',
    columns='dept_nm_lvl_1',
    aggfunc='sum'
).reindex(index=week_names).plot()

# 요일별 집행횟수 출력과 시각화
exp_2021_all.pivot_table(index="exec_week", values="exec_amount", aggfunc="count").reindex(index=week_names).plot()

# 시간별 집행횟수 출력과 시각화
exec_dt = pd.to_datetime( exp_2021_all["exec_dt"] ) # exec_dt를 Timestamp타입 시리즈로 변환
exp_2021_all["exec_hour"] = exec_dt.dt.hour # Timestamp타입 시리즈에서 시간 추출

exp_2021_all.pivot_table(index="exec_hour", values="exec_amount", aggfunc="count").plot()

exp_2021_all.pivot_table(index="exec_hour", values="exec_amount", aggfunc="count").plot.bar()

exp_2021_all["exec_amount"].max(), exp_2021_all["exec_amount"].min()

exp_2021_all["exec_amount"].describe()

# 레벨1 부서별 집행 금액 돗수분포도
exp_2021_all[["exec_amount"]].plot.hist(bins=100)

# 레벨1 부서별 집행 금액 산점도로 표시
exp_2021_all[["exec_amount"]].plot.box()

# 레벨1 부서별 횟수,평균금액,최대,최소금액
exp_2021_all.pivot_table(
    index="dept_nm_lvl_1",
    values="exec_amount",
    aggfunc=["count","mean","max","min"])

# 레벨1 부서별 횟수,평균금액,최대,최소금액
exp_2021_all.pivot_table(
    index="dept_nm_lvl_1",
    values="exec_amount",
    aggfunc=["count","mean","max","min"]).plot()

# 레벨1 부서별 집행금액 분포
# seaborn
import seaborn as sns
sns.boxplot(data=exp_2021_all, y="exec_amount", x="dept_nm_lvl_1")

# 레벨1 부서별, 월별 집행금액 분포
# seaborn
import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize=(18,3))
sns.boxplot(
    data=exp_2021_all, 
    y="exec_amount",  # 통계대상
    x="dept_nm_lvl_1", # 메인그룹
    hue="exec_month")  # 서브그룹

# 월별,레벨1 부서별,  집행금액 분포
# seaborn
import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize=(18,3))
sns.boxplot(
    data=exp_2021_all, 
    y="exec_amount",  # 통계대상
    x="exec_month", # 메인그룹
    hue="dept_nm_lvl_1")  # 서브그룹

sns.lmplot(data=exp_2021_all, x="exec_month", y="exec_amount",)

# 레벨1부소별, 월별 집행 금액
레벨1부서별_월별집행금액 = exp_2021_all.pivot_table(
    index="dept_nm_lvl_1",
    values="exec_amount",
    columns="exec_month",
    aggfunc="sum")
레벨1부서별_월별집행금액

plt.figure(figsize=(18,10))
sns.heatmap(레벨1부서별_월별집행금액,annot=True, fmt="d")

sns.pairplot(레벨1부서별_월별집행금액)

sns.pairplot(레벨1부서별_월별집행금액)



# 서울시 업무추진비 데이터를 모두 읽은 후(2017 ~ 2021까지)
# 레벨1부서별, 연도별 집행금액 총액을 막대그래프로 표시하세요
import pandas as pd
path = "/content/drive/MyDrive/서울시업무추진비/"
filename = "201701_expense_list.csv"
exp1 = pd.read_csv(path+filename)
for y in range(2017,2022):
  for no in range(1,13):
    if y==2017 and no==1:
      continue
    filename = f"{y}{no:02d}_expense_list.csv"
    exp1 = exp1.append(pd.read_csv(path+filename))
exp1.pivot_table(
    index='dept_nm_lvl_1',
    columns='exec_yr',
    values='exec_amount',
    aggfunc='sum'
).plot.bar()

exp1["dept_nm_lvl_1"] = exp1["dept_nm_lvl_1"].str.replace(",","")

exp1.pivot_table(
    index='dept_nm_lvl_1',
    columns='exec_yr',
    values='exec_amount',
    aggfunc='sum'
).plot.bar()

exp1.pivot_table(
    index='dept_nm_lvl_1',
    columns='exec_yr',
    values='exec_amount',
    aggfunc='count'
).plot.bar()

exp1[exp1['dept_nm_lvl_1']=='사업소,'].info()

exp1.info()



