# -*- coding: utf-8 -*-
"""ki rok

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13o971ckyNoF8naceGCDPBoOhSUTWIrST

# mySUNI 모듈 설치
"""

!pip install mySUNI

"""#한글적용"""

### 구글 코랩 한글적용(matplotlib)

# 코랩 한글 적용
!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf
# 코랩 한글 적용 후 런타임 재시작
import matplotlib.pyplot as plt
plt.rc('font', family='NanumBarunGothic')
plt.rc('axes', unicode_minus=False)

"""# 데이터 다운로드"""

from mySUNI import cds
cds.list_data() # 데이터 목록 조회

cds.download_data('유가가격분석') # 데이터 다운로드

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# %matplotlib inline

plt.rc('font', family='NanumBarunGothic')

"""# 1. 데이터 불러오기"""

first = pd.read_csv('/content/data/gas_first_2019.csv', encoding='euc-kr')
second = pd.read_csv('/content/data/gas_second_2019.csv', encoding='euc-kr')

# 상반기 주유소 판매 데이터 불러오기
first

second

# 상반기 판매가격 데이터 프레임 결측치 조회
first.isna().sum()

# 하반기 판매가격 데이터 프레임 결측치 조회
second.isna().sum()

"""# 2. 데이터 결합"""

# 상반기와 하반기 데이터를 상하로 결합
df=first.append(second)
df

"""# 3. 데이터 가공 및 분석"""

# 데이터 프레임 정보 조회
df.info()

# 상표 컬럼의 값(value) 분포 조회 
df['상표'].value_counts()

# 지역 컬럼의 값(value) 분포 조회 
df['지역'].value_counts()

"""tip.
1. apply를 활용합니다.
2. split을 활용합니다.

예시)
<br>df['지역'].apply(split_place).str[0] ==> 앞단어
<br>df['지역'].apply(split_place).str[0] ==> 뒷단어
"""



# 지역 컬럼의 값을 이용하여 시와 구를 분리
df['시']=df['지역'].str.split(' ',expand=True)[0]
df['구']=df['지역'].str.split(' ',expand=True)[1]
df.head()

# 시 컬럼의 서울을 서울특별시로 변환
df['시'] = df['시'].str.replace('서울', '서울특별시')
df.head()

# 휘발유 가격이 비싼 5개 판매가격을 출력하세요.
df.sort_values('휘발유').tail(5)

# 휘발유 가격이 저렴한 5개 판매가격을 출력하세요. (단 휘발유가 0원인 데이터는 제외)
df[df['휘발유']!=0].sort_values('휘발유').head(5)

# 상표별 평균 휘발유 가격을 계산하세요.
a=df.pivot_table(
    index='상표',
    values='휘발유',
)
a

# 상표별 평균 휘발유 가격을 시각화하세요.
plt.figure(figsize=(10, 7))
a.plot.bar()

# 상표와 셀프여부별 평균 휘발유 가격을 계산하세요.
b=df.pivot_table(
    index=['상표','셀프여부'],
    values='휘발유',
)
b

# 상표와 셀프여부별 평균 휘발유 가격을 시각화하세요.
b.plot.bar()

# 셀프여부에 따라 휘발유 가격을 boxplot으로 시각화해보세요.
# 휘발유가 0인 데이터는 제외하고 시각화합니다.
plt.figure(figsize=(10, 7))
sns.boxplot(
    data=df[df['휘발유']!=0], 
    y="휘발유",
    x='셀프여부'
)

# 휘발유 가격과 일반 주유소의 가격을 boxplot을 이용하여 시각화해보세요.
# 휘발유가 0인 데이터는 제외하고 시각화합니다.
plt.figure(figsize=(10, 7))
sns.boxplot(
    data=df[df['휘발유']!=0], 
    y='휘발유',
    x='상표',
    hue='셀프여부')  # 서브그룹

df.info()

# 지역별 평균 휘발유 가격을 계산하세요
c=df.pivot_table(
    index='지역',
    values='휘발유'
)
c

# 지역별 평균 휘발유 가격을 시각화하세요.
c.plot.bar()

# pivot_table 함수를 이용하여 구와 상표 컬럼을 이용하여 평균 휘발유 가격을 계산하세요
g=df.pivot_table(
    index='구',
    values='휘발유',
    columns='상표'
)
g

# pivot_table 함수를 이용하여 구와 상표 컬럼을 이용하여 평균 휘발유 가격을 시각화 하세요 (heatmap 이용)
plt.figure(figsize=(10, 7))
sns.heatmap(g,annot=True, fmt="d")

df.info()

# pivot_table 함수를 이용하여 구와 월 컬럼을 이용하여 평균 휘발유 가격을 시각화 하세요 (heatmap 이용)
plt.figure(figsize=(10, 7))
df['기간']=df['기간'].astype('str')
df['월']=df['기간'].str.split('-',expand=True)[1]
df['기간']=pd.to_datetime(df['기간'])
h=df.pivot_table(
    index='구',
    values='휘발유',
    columns='월'
)
h
sns.heatmap(h,annot=True, fmt="d")



