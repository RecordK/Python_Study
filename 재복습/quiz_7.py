# -*- coding: utf-8 -*-
"""quiz_7

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Imkd4XyNipfrpmhZBa9dGhHNi9ur3w5u

# 서울시 기간별 시간평균 대기환경 정보 데이터 분석

## 임포트
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.ticker as mticker
!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf
plt.rc('font', family='NanumBarunGothic')
plt.rc('axes', unicode_minus=False)

"""## 소스코드"""

#1. 20년 19년 다운로드
#2. 20 air_2020
#.  19 air_2019
import pandas as pd
air_2020=pd.read_csv('/content/drive/MyDrive/대기환경20.csv',encoding='cp949')
air_2019=pd.read_csv('/content/drive/MyDrive/대기환경19.csv',encoding='cp949')

#3 두파일을 수직결합하여여 air_all 변수에 저장
air_all=pd.concat([air_2020,air_2019])
in1=[i for i in range(18046)]
air_all.index=in1

#4 칼럼정보 확인
air_all.columns

#5 칼럼별 데이터타입
air_all.info()

#6 측정일자 칼럼의 타입을 datetime타입으로 변경경
air_all['측정일자'].astype('datetime64[ns]')

#7 칼럼별 결측치의 갯수를 확인#8 결측치가 있는 행 추출#9 결측들을 0으로로 채움
def check(data):
    mcol = []
    for col in data.columns:
        mv = sum(data[col].isna())
        is_missing = True if mv >= 1 else False
        if is_missing:
            print(f'결측 {col}')
            print(f'{mv} 개')
            mcol.append([col, data[col].dtype])
    if mcol == []:
        print('결측치 없음')
    return mcol

mcol = check(air_all)

#10 초 미세먼지 농도가  높은 순으로 정렬하여 10개만 추출해보세요
air_all.sort_values('초미세먼지(㎍/㎥)',ascending=False).head(10)

#11 미세먼지 24시간 농도가 낮은 순으로 정렬하여 마지막 10개만 출력해보세요
air_all.sort_values('미세먼지(㎍/㎥)').tail(10)


#12 강남구 측정소와 종로구 측정소의 날짜별 미세먼지 량을 선 그래프로 그리세요
import matplotlib.dates as mdates


# 13. 권역별 날짜별 미세먼지 량을  선그래프로 그리세요. X축은 날짜



# 14. 측정소별 날짜별 미세먼지 변화량이 가장 큰 측정소와 작은 측정소의 이름을 찾아 출력하세요

air_all.info()

강남종로=air_all[air_all.측정소명.isin(['강남구','종로구'])]

from matplotlib import dates
plt.figure(figsize=(20,5))
# plt.xticks(강남종로[강남종로['측정소명']=='강남구']['측정일자'],
#            강남종로[강남종로['측정소명']=='강남구']['미세먼지(㎍/㎥)'],
#            rotation=60)
plt.xticks(rotation=45)
# DateFormatter 객체를 생성. 포맷팅할 형식도 함께 지정.
dateFmt = mdates.DateFormatter('%Y-%m-%d')
# x축 레이블을 포맷팅.
ax.xaxis.set_major_formatter(dateFmt)
plt.plot(
    강남종로[강남종로['측정소명']=='강남구']['측정일자'],
    강남종로[강남종로['측정소명']=='강남구']['미세먼지(㎍/㎥)']
)

강남종로[강남종로['측정소명']=='강남구']['측정일자']

강남종로[강남종로['측정소명']=='종로구']['미세먼지(㎍/㎥)']

import matplotlib.ticker as mticker

